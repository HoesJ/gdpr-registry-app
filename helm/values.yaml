# Default values for project.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Environment, used in labels
environment: development

# Define the release name to track it back to azure devops
release: unknown

# Minimal replica count
replicaCount: 1

# Pod disruption budget, will automatically be set to 0 when
minAvailable: 1

image:
  # The image repository, in most of the case it is in the form of 
  # registry.romcore.cloud/<your-repo-name>
  # The prefix can be omitted if it is the default
  repository: to-be-overridden
  # The image tag, the tag is optional and is preferably set by the .Chart.AppVersion. This version number can
  # be set during the packaging of the Helm chart using the --app-version flag.
  # tag: to-be-overridden
  # The container port
  port: 8080
  # The http path to check the liveness, set it to null to remove it
  livenessPath: /
  # The name of the image pull secret
  imagePullSecret: docker-registry
  # Set the initial delay in seconds before the liveness probes kick in
  livenessInitialDelay: 120
  # Set the initial delay in seconds before the liveness probes kick in
  readinessInitialDelay: 20
  # Optionally you can set the following values to control the liveness and readiness probes
  # periodSeconds: 10
  # failureThreshold: 5

service:
  # The port on which the service needs to be exposed
  port: 80

ingress:
  # Should enable ingress or not
  enabled: false
  # Set true if you want to enable our standard google authentication
  authEnabled: false
  # True only for production environment, otherwise false
  production: false
  # Optional value, with this value you can set a custom host subdomain. E.g. if your subdomain value is test123
  # the full hostname will result in (production) test123.production1.romcore.cloud
  # subdomain: "test123"
  # Optional value, when not set the default value is project fullname plus default domain
  # host: ""
  # Ingress path, this can be a simple path or a regex to capture groups. If capture groups are provided you should also fill in the reqrite target correctly
  # Read more: https://kubernetes.github.io/ingress-nginx/examples/rewrite/#rewrite-target
  path: /
  rewriteTarget: /
  # Enable cors
  cors: false
  # Set app root, for example the base url on your pod is /v1 you can use an app rout to redirect incoming / to /v1
  # appRoot: /
  # Provide extra annotations for the ingress, such as path rewrites... Do not forget to remove {}
  # when you fill this in... Check all possible annotations on the following url:
  # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/
  annotations: {}

# Define resources for your deployment. It is advised, certainly for JVM-based backends to omit the
# CPU limit and only put a request. Your POD can spike on startup. Also, keep the memory the same
# as it put your pods in the QoS class Burstable. It makes it more unlikely to be killed when the
# node runs out of resources.
# Source: https://medium.com/faun/java-application-optimization-on-kubernetes-on-the-example-of-a-spring-boot-microservice-cf3737a2219c
resources:
  limits:
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 512Mi

# Activate prometheus monitoring for your deployment
prometheus:
  # Prometheus service monitor specifies how to scrape metrics from your API (instrumentation)
  # Include micrometer-registry-prometheus dependency for Spring Boot projects
  serviceMonitor:
    # Should enable prometheus service monitor or not
    enabled: false
    # API path to scrape metrics for prometheus instrumentation
    path: /actuator/prometheus
  # Prometheus alert rules define when an alert should be fired
  alertRules:
    # Should enable prometheus alert rules or not
    enabled: false
    # Set customer label which the alert manager uses to determine the slack channel for notifications
    customer: to-be-overridden
    # Set severity by default to "warning".
    # Use severity "critical" for production environment.
    severity: warning

# Below is an example how to store your application-specific variables. A good practice is to
# write and document all configurable variables here. You can set a value here if the value 
# does not change across environments and is not release-specific.
# Values which are not secret and not release-specific, but are environment-specific can be set
# in the /values directory in the environment values file as an override. Secrets should always
# be set in the pipeline (preferably coming from a KeyVault).
# <your application>:
#   someValue: "aaaa"
#   otherValue: "beee"
#   setInPipelineOrSecret: to-be-overridden
